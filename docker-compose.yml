  version: "3"

  services:
    full:
      image: tianon/true
      depends_on: [portainer, portainer-agent, fluentd, database, pgadmin, metabase, elasticsearch, kibana, prometheus]
    
    lite:
      image: tianon/true
      depends_on: [portainer, portainer-agent, database, pgadmin, fluentd, metabase]

    metrics:
      image: tianon/true
      depends_on: [prometheus, kibana, elasticsearch]

    portainer:
      image: portainer/portainer-ce
      ports:
        - 9000:9000
      restart: unless-stopped 
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      depends_on:
        - portainer-agent
      networks:
        - admin

    portainer-agent:
      image:  portainer/agent:2.19.4
      container_name: portainer_agent
      ports:
        - 9001:9001 
      restart: unless-stopped 
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - /var/lib/docker/volumes:/var/lib/docker/volumes
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      networks:
        - admin

    vault:   
      image: hashicorp/vault
      environment:
        VAULT_DEV_ROOT_TOKEN_ID: "root"  # Development mode root token
        VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200" 
      ports:
      - 8200:8200
      restart: unless-stopped
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      networks:
        - admin



    # Services - Database
    # ============================

    database: # Data archiving
      container_name: Postgres
      build:
        context: ./Database
        dockerfile: Dockerfile
      environment:  
        POSTGRES_USER: "${POSTGRES_USER}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_DB: "${POSTGRES_DB}"
      # entrypoint: /Scripts/init.sh 
      tty: true
      restart: unless-stopped
      volumes:
        - postgres-db:/var/lib/postgresql/data
        - ./Database/Config/pg_hba.conf:/var/lib/postgresql/conf/pg_hba.conf
        - ./Database/Scripts:/Scripts
      ports:
        - '5433:5432'
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      user:
        postgres
      networks:
      - postgres
      - logging

    pgadmin:
      image: dpage/pgadmin4:latest
      container_name: pgadmin
      environment:
        PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER}"
        PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
      ports:
        - "6543:80"
      restart: unless-stopped
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`, `pgadmin.traefik.internal`)"
        - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
        - "traefik.http.services.pgadmin.loadbalancer.server.scheme=http"
        # - "traefik.http.middlewares.pgadmin.stripprefix.prefixes=/pgadmin"
        # - "traefik.http.middlewares.pgadmin.stripprefix.forceSlash=false"
        - "traefik.http.routers.pgadmin.middlewares=pgadmin-auth"
        - "traefik.http.middlewares.pgadmin-auth.basicauth.usersfile=/htpasswd.txt"
        # - "function.port.80=Reverse Proxy "
      networks:
      - postgres
      - logging
      - traefik


    metabase:
      image: metabase/metabase:latest
      container_name: metabase
      ports:
        - "3000:3000"
      environment:
        - MB_DB_TYPE=postgres
        - MB_DB_DBNAME=metabase_database
        - MB_DB_PORT=5432
        - MB_DB_USER=${METABASE_DB_USER}
        - MB_DB_PASS=${METABASE_DB_PASS}
        - MB_DB_HOST=database
      restart: unless-stopped
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.metabase.rule=Host(`metabase.localhost`, `metabase.traefik.internal`)"
        - "traefik.http.services.metabase.loadbalancer.server.port=3000"
        - "traefik.http.services.metabase.loadbalancer.server.scheme=http"
        # - "traefik.http.middlewares.metabase.stripprefix.prefixes=/metabase"
        # - "traefik.http.middlewares.metabase.stripprefix.forceSlash=false"
        - "traefik.http.routers.metabase.middlewares=metabase-auth"
        - "traefik.http.middlewares.metabase-auth.basicauth.usersfile=/htpasswd.txt"
        # - "function.port.80=Reverse Proxy "
      networks:
        - traefik
        - postgres
        - logging

    # Services - Logging
    # ============================

    logspout:
      # Log collector
      image: gliderlabs/logspout:latest
      ports:
        - ${LOGSPOUT_PORT}:514/udp
      links:
        - "database"
      volumes:
      - //var/run/docker.sock:/var/run/docker.sock
      command: syslog://${POSTGRES_LOG_USER}:${POSTGRES_LOG_PASSWORD}@database:5432/logs_database/logspout
      networks:
        - postgres
        - logging

    fluentd:
      # Log collector
      build: 
        context: ./
        dockerfile: ./fluentd/.Dockerfile
      environment:
        - LOG_DATABASE_NAME=${LOG_DATABASE_NAME}
        - LOG_DATABASE_USER=${LOG_DATABASE_USER}
        - LOG_DATABASE_PASSWORD=${LOG_DATABASE_PASSWORD}
        - LOG_DATABASE_TABLE=${LOG_DATABASE_TABLE}
      volumes:
        - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf
      links:
        - "database"
      ports:
        - "${FLUENTD_PORT}:24224"
        - "${FLUENTD_PORT}:24224/udp"
      logging:
        driver: json-file
      restart: unless-stopped
      networks:
        - postgres
        - logging

    # Services - Metrics
    # ============================

    elasticsearch:
      # Data Search
      image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
      container_name: elasticsearch
      environment:
        - "discovery.type=single-node"
        - "XPACK_REPORTING_ENABLED=false"
        - "XPACK_SECURITY_ENABLED=false"
        - "XPACK_WATCHER_ENABLED=false"
      # ports:
      #   - "${ELASTICSEARCH_PORT}:9200"
      logging:
        driver: json-file 
      restart: always
      networks:
        - postgres
        - logging
    
    kibana:
      # Data Visualisation
      image: docker.elastic.co/kibana/kibana:7.13.1
      links:
        - "elasticsearch"
      environment:
        - "XPACK_GRAPH_ENABLED=false"
        - "XPACK_ML_ENABLED=false"
        - "XPACK_REPORTING_ENABLED=false"
        - "XPACK_SECURITY_ENABLED=false"
        - "XPACK_WATCHER_ENABLED=false"
      ports:
        - "${KIBANA_PORT}:5601"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: '172.23.0.3:24224'
      restart: always
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`, `kibana.traefik.internal`, `kibana.int`) || PathPrefix(`/kibana`)"
        - "traefik.http.services.kibana.loadbalancer.server.port=5601"
        - "traefik.http.routers.kibana.entrypoints=web"
        - "traefik.http.middlewares.kibana.stripprefix.prefixes=/kibana"
        - "traefik.http.middlewares.kibana.stripprefix.forceSlash=false"
        - "traefik.http.routers.kibana.middlewares=kibana"
        - "traefik.http.routers.kibana.middlewares=kibana, kibana-auth"
        - "traefik.http.middlewares.kibana-auth.basicauth.usersfile=/htpasswd.txt"
      networks:
        - traefik
        - postgres
        - logging

    prometheus:
      # Metric collector
      image: prom/prometheus
    
      # ports:
      #   - "${PROMETHEUS_PORT}:9090"
      volumes: 
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      restart: always
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`, `prometheus.traefik.internal`, `prometheus.int`) || PathPrefix(`/prometheus`)"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
        - "traefik.http.routers.prometheus.entrypoints=web"
        - "traefik.http.middlewares.prometheus.stripprefix.prefixes=/prometheus"
        - "traefik.http.middlewares.prometheus.stripprefix.forceSlash=false"
        - "traefik.http.routers.prometheus.middlewares=prometheus"
        - "traefik.http.routers.prometheus.middlewares=prometheus, prometheus-auth"
        - "traefik.http.middlewares.prometheus-auth.basicauth.usersfile=/htpasswd.txt"
      networks:
        - traefik
        - postgres
        - logging

  volumes:
    postgres-db:
      # driver: local
      # driver_opts:
      #     type: none
      #     o: bind
      #     device: ./Database/data

  # Networks
  # ==============================
  networks:

    # Reverse Proxy Network
    traefik:
      name: traefik
      external: true  # Defined in Docker-Network

    # Logging and admin
    admin:
      internal: true

    logging:
      internal: true

    postgres:
      name: postgres
      internal: true

    secure_overlay_network:
      driver: overlay
      driver_opts:
        encrypted: true
        scope: engine
      ipam:
        driver: default
        config:
          - subnet: 10.0.0.0/24