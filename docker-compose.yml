  version: "3.5"

# Docker Admin
# Services  
#   Portainer:
#   Fluent D:
#   Database:
#     A postgres database 
#   PGadmin:
#   Metabase:
#   redis:
#   redis-insight:
#   Elasticsearch:
#   Kibana:
#   Prometheus:
#
#

  services:
    full:
      image: tianon/true
      depends_on: [portainer, fluentd, database, pgadmin, metabase, elasticsearch, kibana, prometheus]
    
    lite:
      image: tianon/true
      depends_on: [database, pgadmin, fluentd, metabase]

    metrics:
      image: tianon/true
      depends_on: [prometheus, kibana, elasticsearch]

    portainer:
      container_name: portainer
      # user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/portainer/.Dockerfile
      hostname: portainer #optional
      ports:
        - 9000:9000
        - 9443:9443
      restart: unless-stopped 
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      networks:
        - admin
        - logging
        - traefik
  

      # labels:
        # - "traefik.enable=true"
        # - "traefik.http.routers.portainer.rule=Host(`portainer.localhost`, `portainer.traefik.internal`)"
        # - "traefik.http.routers.portainer.tls=true"
        # - "traefik.http.routers.portainer.middlewares=portainer-auth"

        # - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        # - "traefik.http.services.portainer.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.portainer.stripprefix.prefixes=/portainer"
        # - "traefik.http.middlewares.portainer.stripprefix.forceSlash=false"
        # - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        # - "traefik.http.middlewares.portainer-auth.basicauth.usersfile=/htpasswd.txt"

    vault:
      container_name: vault   
      build:
        context: ./vault
        dockerfile: Dockerfile
      ports:
        - "8200:8200"
      environment:
        - VAULT_ADDR=https://127.0.0.1:8200
      restart: unless-stopped
      volumes:
      - vault-data:/vault/data  # Mount a host directory for persistent data
      - ./Services/vault/config/config.hcl:/etc/vault/config.hcl
      networks:
        - vault
        - traefik
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.vault.rule=Host(`vault.localhost`, `vault.traefik.internal`)"
        # - "traefik.http.routers.vault.tls=true"
        # - "traefik.http.routers.vault.middlewares=vault-auth, test-ipwhitelist"

        - "traefik.http.services.vault.loadbalancer.server.port=8200"
        - "traefik.http.services.vault.loadbalancer.server.scheme=https"

        # - "traefik.http.middlewares.vault.stripprefix.prefixes=/vault"
        # - "traefik.http.middlewares.vault.stripprefix.forceSlash=false"
        # - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        # - "traefik.http.middlewares.vault-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"
        

    openldap:
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/openldap/.Dockerfile
      container_name: openldap
      hostname: openldap
      restart: unless-stopped
      # volumes:
        # - ./Services/openldap/LDAP/storage/ldap_db:/var/lib/ldap
        # - ./Services/openldap/LDAP/storage/ldap_config:/etc/ldap/slapd.d
        # - ./Services/openldap/LDAP/storage/ldap_data:/bitnami/openldap
      environment:
        - LDAP_ADMIN_USERNAME=admin
        - LDAP_ADMIN_PASSWORD=admin
        - LDAP_USERS=customuser
        - LDAP_PASSWORDS=custompassword
        - LDAP_ROOT=dc=example,dc=org
        - LDAP_ADMIN_DN=cn=admin,dc=example,dc=org
      ports:
        - '1389:1389'
        - '1636:1636'
      networks:
        - admin
        - logging
  

      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

    openldap-ui:
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/openldap-ui/.Dockerfile
      container_name: openldap-ui
      hostname: openldap-ui
      restart: unless-stopped
      environment:
        - LDAP_URI=ldap://openldap:1389
        - LDAP_BASE_DN=ou=users,dc=example,dc=org
        # - LDAP_REQUIRE_STARTTLS=never
        - LDAP_ADMINS_GROUP=users
        - LDAP_ADMIN_BIND_DN=cn=admin,dc=example,dc=org
        - LDAP_ADMIN_BIND_PWD=admin
        - LDAP_IGNORE_CERT_ERRORS=true
        - NO_HTTPS=TRUE
        - PASSWORD_HASH=SSHA
        - SERVER_HOSTNAME=localhost:18080
        # - LDAP_GROUP_OU=users
      depends_on:
        - openldap
      ports:
        - 18080:80
      networks:
        - admin
        - logging
        - traefik
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.openldap-ui.rule=Host(`openldap-ui.localhost`, `openldap-ui.traefik.internal`)"
        - "traefik.http.routers.openldap-ui.tls=true"
        - "traefik.http.routers.openldap-ui.middlewares=openldap-ui-auth, test-ipwhitelist"

        - "traefik.http.services.openldap-ui.loadbalancer.server.port=80"
        - "traefik.http.services.openldap-ui.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.openldap-ui.stripprefix.prefixes=/openldap-ui"
        # - "traefik.http.middlewares.openldap-ui.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        - "traefik.http.middlewares.openldap-ui-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

    # Services - Database
    # ============================

    database: # Data archiving
      # user: 1000:1000
      container_name: Postgres
      user: postgres
      build:
        context: ./Database
        dockerfile: Dockerfile
      tty: true
      restart: unless-stopped
      environment:  
        POSTGRES_USER: "${POSTGRES_USER}"
        POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
        POSTGRES_DB: "${POSTGRES_DB}"
      volumes:
        - postgres-db:/var/lib/postgresql/data
        - ./Services/Database/Config/pg_hba.conf:/var/lib/postgresql/conf/pg_hba.conf
        - ./Services/Database/Scripts:/Scripts
      networks:
        - postgres
        - logging
  

      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"


    pgadmin:
      build:
        context: ./
        dockerfile: ./Services/pgadmin/.Dockerfile
      hostname: pgadmin
      container_name: pgadmin
      restart: unless-stopped
      environment:
        PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER}"
        PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
        PGADMIN_CONFIG_WTF_CSRF_CHECK_DEFAULT: 'False'
        PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
      # ports:
      #   - "6543:80"
      networks:
        - logging
        - postgres
        - traefik
  

      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.localhost`, `pgadmin.traefik.internal`)"
        # - "traefik.http.routers.pgadmin.tls=true"
        - "traefik.docker.network=traefik"
        # - "traefik.http.routers.pgadmin.middlewares=pgadmin-auth, test-ipwhitelist"

        - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
        - "traefik.http.services.pgadmin.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.pgadmin.stripprefix.prefixes=/pgadmin"
        # - "traefik.http.middlewares.pgadmin.stripprefix.forceSlash=false"
        # - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        # - "traefik.http.middlewares.pgadmin-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

    redis:
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/redis/.Dockerfile
      container_name: my-redis
      hostname: my-redis #optional
      restart: always
      # ports:
      #   - "127.0.0.1:6379:6379"
      volumes:
        - ./Services/redis/redis.conf:/usr/local/etc/redis/redis.conf
        - redis_data:/data
      command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
      environment:
        REDIS_PASSWORD: secret
  

      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"
        
    redis-insight:
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/redis-insight/.Dockerfile
      container_name: redis-insight
      hostname: redis-insight #optional
      restart: always
      # ports:
      #   - "5540:5540"
      volumes:
        - redisinsight:/data
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.redis.rule=Host(`redis.localhost`, `redis.traefik.internal`)"
        - "traefik.http.routers.redis.tls=true"
        - "traefik.http.routers.redis.middlewares=redis-auth, test-ipwhitelist"

        - "traefik.http.services.redis.loadbalancer.server.port=5540"
        - "traefik.http.services.redis.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.redis.stripprefix.prefixes=/redis"
        # - "traefik.http.middlewares.redis.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        - "traefik.http.middlewares.redis-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"



    metabase:
      container_name: metabase
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/metabase/.Dockerfile
      hostname: metabase #optional
      # ports:
      #   - "3000:3000"
      networks:
        - traefik
        - logging
        - postgres
      environment:
        - MB_DB_TYPE=postgres
        - MB_DB_DBNAME=metabase_database
        - MB_DB_PORT=5432
        - MB_DB_USER=${METABASE_DB_USER}
        - MB_DB_PASS=${METABASE_DB_PASS}
        - MB_DB_HOST=database
      restart: unless-stopped
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.metabase.rule=Host(`metabase.localhost`, `metabase.traefik.internal`)"
        - "traefik.http.routers.metabase.tls=true"
        - "traefik.http.routers.metabase.middlewares=metabase-auth"

        - "traefik.http.services.metabase.loadbalancer.server.port=3000"
        - "traefik.http.services.metabase.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.metabase.stripprefix.prefixes=/metabase"
        # - "traefik.http.middlewares.metabase.stripprefix.forceSlash=false"
        # - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        - "traefik.http.middlewares.metabase-auth.basicauth.usersfile=/htpasswd.txt"      
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"



    # Services - File Management
    # ============================

    syncthing:
      user: 1000:1000
      build:
        context: ./
        dockerfile: ./Services/syncthing/.Dockerfile
      container_name: syncthing
      hostname: syncthing #optional
      environment:
        - PUID=1000
        - PGID=1000
        - TZ=Etc/UTC
      volumes:
        - /path/to/syncthing/config:/config
        - /path/to/data1:/data1
        - /path/to/data2:/data2
      ports:
        - 8384:8384
        - 22000:22000/tcp
        - 22000:22000/udp
        - 21027:21027/udp
      restart: unless-stopped
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.syncthing.rule=Host(`syncthing.localhost`, `syncthing.traefik.internal`)"
        - "traefik.http.routers.syncthing.tls=true"
        - "traefik.http.routers.syncthing.middlewares=syncthing-auth, test-ipwhitelist"

        - "traefik.http.services.syncthing.loadbalancer.server.port=8384"
        - "traefik.http.services.syncthing.loadbalancer.server.scheme=http"

        # - "traefik.http.middlewares.syncthing.stripprefix.prefixes=/syncthing"
        # - "traefik.http.middlewares.syncthing.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.test-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.3.201, 192.168.3.196"
        - "traefik.http.middlewares.syncthing-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

    homeassistant:
      # user: "1000" # Security measure: Run as non-root
      container_name: homeassistant
      image: "ghcr.io/home-assistant/home-assistant:stable"
      ports:
        - 8123:8123
      volumes:
        - ./homassistant/config:/config
        - /etc/localtime:/etc/localtime:ro
      restart: unless-stopped
      # privileged: true
      # network_mode: host   
      networks:
        - traefik
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.homeassistant.rule=Host(`homeassistant.localhost`, `homeassistant.traefik.internal`) || PathPrefix(`/homeassistant`)"
        - "traefik.http.routers.homeassistant.tls=true"
        - "traefik.http.routers.homeassistant.middlewares=homeassistant, homeassistant-auth"

        - "traefik.http.services.homeassistant.loadbalancer.server.port=8080"
        - "traefik.http.services.homeassistant.loadbalancer.server.scheme=https"

        - "traefik.http.middlewares.homeassistant.stripprefix.prefixes=/homeassistant"
        - "traefik.http.middlewares.homeassistant.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.homeassistant-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
            fluentd-async-connect: 'true'
            fluentd-address: '192.168.3.201:24224'

    # Services - Logging
    # ============================

    logspout:
      container_name: logspout
      # Log collector
      image: gliderlabs/logspout:latest
      # ports:
      #   - ${LOGSPOUT_PORT}:514/udp
      links:
        - "database"
      volumes:
      - //var/run/docker.sock:/var/run/docker.sock
      command: syslog://${POSTGRES_LOG_USER}:${POSTGRES_LOG_PASSWORD}@database:5432/logs_database/logspout
      networks:
        - postgres
        - logging
    



    fluentd:
      container_name: fluentd
      hostname: fluentd
      # Log collector
      build: 
        context: ./
        dockerfile: ./Services/fluentd/.Dockerfile
      user: "0" # Run as root
      environment:
        - LOG_DATABASE_NAME=${LOG_DATABASE_NAME}
        - LOG_DATABASE_USER=${LOG_DATABASE_USER}
        - LOG_DATABASE_PASSWORD=${LOG_DATABASE_PASSWORD}
        - LOG_DATABASE_TABLE=${LOG_DATABASE_TABLE}
      volumes:
        - ./Services/fluentd/fluent.conf:/fluentd/etc/fluent.conf
        - docker-network_traefik-logs:/logs/traefik
      # links:
      #   - "database"
      ports:
        - "${FLUENTD_PORT}:24224"
        - "${FLUENTD_PORT}:24224/udp"
  

      logging:
        driver: json-file
      restart: unless-stopped
      networks:
        logging:
          ipv4_address: 10.0.200.200
        postgres:
  


    # Services - Metrics
    # ============================

    elasticsearch:
      # Data Search
      image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
      container_name: elasticsearch
      restart: always
      networks:
        - logging
        - postgres
      environment:
        - "discovery.type=single-node"
        - "XPACK_REPORTING_ENABLED=false"
        - "XPACK_SECURITY_ENABLED=false"
        - "XPACK_WATCHER_ENABLED=false"
      # ports:
      #   - "${ELASTICSEARCH_PORT}:9200"
  

      logging:
        driver: json-file 

    

    kibana:
      container_name: kibana
      # Data Visualisation
      image: docker.elastic.co/kibana/kibana:7.13.1
      links:
        - "elasticsearch"
      environment:
        - "XPACK_GRAPH_ENABLED=false"
        - "XPACK_ML_ENABLED=false"
        - "XPACK_REPORTING_ENABLED=false"
        - "XPACK_SECURITY_ENABLED=false"
        - "XPACK_WATCHER_ENABLED=false"
      # ports:
      #   - "${KIBANA_PORT}:5601"
      networks:
        - traefik
        - postgres
        - logging
      restart: always
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`, `kibana.traefik.internal`, `kibana.int`) || PathPrefix(`/kibana`)"
        - "traefik.http.routers.kibana.tls=true"
        - "traefik.http.routers.kibana.middlewares=kibana, kibana-auth"

        - "traefik.http.services.kibana.loadbalancer.server.port=5601"

        - "traefik.http.middlewares.kibana.stripprefix.prefixes=/kibana"
        - "traefik.http.middlewares.kibana.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.kibana-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

        

    prometheus:
      container_name: prometheus
      # Metric collector
      image: prom/prometheus
      networks:
        - traefik
        - postgres
        - logging
      # ports:
      #   - "${PROMETHEUS_PORT}:9090"
      volumes: 
        - ./Services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      restart: always
  

      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`, `prometheus.traefik.internal`, `prometheus.int`) || PathPrefix(`/prometheus`)"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.middlewares=prometheus, prometheus-auth"

        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

        - "traefik.http.middlewares.prometheus.stripprefix.prefixes=/prometheus"
        - "traefik.http.middlewares.prometheus.stripprefix.forceSlash=false"
        - "traefik.http.middlewares.prometheus-auth.basicauth.usersfile=/htpasswd.txt"
      logging:
        driver: fluentd
        options:
          fluentd-async-connect: 'true'
          fluentd-address: "${LOGGING_ADDRESS}"

        

  volumes:
    
    postgres-db:
    
    vault-data:
    
    docker-network_traefik-logs:
      external: true
    
    redis_data:

    redisinsight:
    
      # driver: local
      # driver_opts:
      #     type: none
      #     o: bind
      #     device: ./Database/data

  # Networks
  # ==============================
  networks:

    # Reverse Proxy Network
    traefik:
      name: traefik
      external: "true"  # Defined in Docker-Network
    
    portainer:

    # Logging and admin
    admin:
      name: admin
      driver: overlay
      # internal: true
      driver_opts:
        encrypted: "true"
        scope: local

    logging:
      name: logging
      driver: overlay
      # internal: true
      driver_opts:
        encrypted: "true"
        scope: local
      ipam:
        config:
          - subnet: 10.0.200.0/24
            gateway: 10.0.200.1

    postgres:
      name: postgres
      driver: overlay
      internal: true
      driver_opts:
        encrypted: "true"
        scope: local
    
    vault:
      name: vault
      driver: overlay
      internal: false
      driver_opts:
        encrypted: "true"
        scope: local

    # secure_overlay_network:
    #   driver: overlay
    #   driver_opts:
    #     encrypted: true
    #     scope: engine
    #   ipam:
    #     driver: default
    #     config:
    #       - subnet: 10.0.0.0/24